<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRUD Data</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-8">
    <div class="max-w-4xl mx-auto bg-white shadow-md rounded-lg p-6">
        <h1 class="text-2xl font-bold text-center mb-6">CRUD Data</h1>

        <!-- Notification -->
        <div id="notification" class="hidden bg-green-500 text-white text-center py-2 rounded-md mb-4"></div>

        <form id="dataForm" class="mb-6 space-y-4">
            <div>
                <label for="name" class="block text-gray-700">Name</label>
                <input type="text" id="name" placeholder="Name" required class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
            </div>
            <div>
                <label for="address" class="block text-gray-700">Address</label>
                <input type="text" id="address" placeholder="Address" required class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
            </div>
            <button type="submit" class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 transition">Add Data</button>
        </form>

        <table class="min-w-full table-auto bg-white shadow-md rounded-lg overflow-hidden">
            <thead>
                <tr class="bg-indigo-600 text-white">
                    <th class="px-6 py-3">ID</th>
                    <th class="px-6 py-3">Name</th>
                    <th class="px-6 py-3">Address</th>
                    <th class="px-6 py-3">Actions</th>
                </tr>
            </thead>
            <tbody id="institutionTableBody" class="divide-y divide-gray-200">
                <!-- Data will be populated here -->
            </tbody>
        </table>

        <!-- Reload Button -->
        <button id="reloadButton" class="mt-4 bg-gray-300 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-400 transition">Reload Data</button>
    </div>

    <script>
        // Use the injected API URL from EJS
        const apiURL = "<%= apiUrl %>";
        console.log('API URL:', apiURL);

        // Form submission
        document.getElementById('dataForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            const name = document.getElementById('name').value;
            const address = document.getElementById('address').value;

            await addData(name, address);
            await fetchData();
            showNotification("Data added successfully!");
        });

        // Fetch and display data
        async function fetchData() {
            const response = await fetch(apiURL);
            const data = await response.json();

            const tableBody = document.getElementById('institutionTableBody');
            tableBody.innerHTML = '';

            data.forEach(item => {
                const row = `
                    <tr>
                        <td class="px-6 py-4">${item.id}</td>
                        <td class="px-6 py-4">${item.name}</td>
                        <td class="px-6 py-4">${item.address}</td>
                        <td class="px-6 py-4">
                            <button class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition" onclick="updateData(${item.id})">Update</button>
                            <button class="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition" onclick="deleteData(${item.id})">Delete</button>
                        </td>
                    </tr>
                `;
                tableBody.innerHTML += row;
            });
        }

        // Add a new data entry
        async function addData(name, address) {
            await fetch(apiURL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: name,
                    address: address
                })
            });
        }

        // Update an existing data entry
        async function updateData(id) {
            const newName = prompt("Enter new name:");
            const newAddress = prompt("Enter new address:");

            if (newName && newAddress) {
                await fetch(`${apiURL}/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: newName,
                        address: newAddress
                    })
                });
                fetchData();
                showNotification("Data updated successfully!");
            }
        }

        // Delete a data entry
        async function deleteData(id) {
            await fetch(`${apiURL}/${id}`, {
                method: 'DELETE'
            });
            fetchData();
            showNotification("Data deleted successfully!");
        }

        // Function to show notification
        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.classList.remove('hidden');

            // Hide notification after 3 seconds
            setTimeout(() => {
                notification.classList.add('hidden');
            }, 3000);
        }

        // Event listener for reload button
        document.getElementById('reloadButton').addEventListener('click', async () => {
            await fetchData();
            showNotification("Data reloaded successfully!");
        });

        // Fetch initial data on page load
        fetchData();
    </script>
</body>
</html>
